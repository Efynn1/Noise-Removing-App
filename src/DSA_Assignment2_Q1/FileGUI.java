package DSA_Assignment2_Q1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author flynn
 */
public class FileGUI extends javax.swing.JFrame {

    private FileRW fileRW;
    private String fileName;

    /**
     * Creates new form NewJFrame
     */
    public FileGUI() {
        initComponents();
        fileRW = new FileRW();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFile = new javax.swing.JButton();
        saveFile = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileOutput = new javax.swing.JTextArea();
        nameSort = new javax.swing.JButton();
        markSort = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DSA_Assignement2_Q1");

        openFile.setText("Open File");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });

        saveFile.setText("Save File");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });

        fileOutput.setColumns(20);
        fileOutput.setRows(5);
        jScrollPane1.setViewportView(fileOutput);

        nameSort.setText("Name");
        nameSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSortActionPerformed(evt);
            }
        });

        markSort.setText("Mark");
        markSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markSortActionPerformed(evt);
            }
        });

        jLabel1.setText("Sort by:");

        jLabel2.setText("Search text area for:");

        searchField.setText("Enter name/mark");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(markSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markSort)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(openFile)
                .addGap(52, 52, 52)
                .addComponent(saveFile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFile)
                    .addComponent(saveFile))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        //searches text area for inputed query
        //if no file is opened prompts user to open new file
        if (fileName == null) {
            fileOutput.setText("Please open a file!");
            openFileActionPerformed(evt);
        } else {
            //split file into seperate lines to be displayed in text area
            String all = "";
            
            //splits file by line and each line in by ", " file to provide student name and mark
            for (String line : fileOutput.getText().split("\\n")) {
                String[] results = line.split(", ");
                //check if search query matches any students loaded
                if (searchField.getText().equalsIgnoreCase(results[0]) || searchField.getText().equalsIgnoreCase(results[1])) {
                    //apend any matching results to be displayed after search is complete
                    all += results[0] + ", " + results[1] + "\n";
                }
            }
            //display search results
            if(all.equals("")){
                all += "File does not contain: " + searchField.getText();
            }
            fileOutput.setText(all);
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:        
        //Open file from chosen file path
        JFileChooser txtFileChooser = new JFileChooser(new File("."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("", "txt");
        txtFileChooser.setFileFilter(filter);
        int stateTxtFileChooser = txtFileChooser.showOpenDialog(null);

        if (stateTxtFileChooser == JFileChooser.APPROVE_OPTION) {
            fileName = txtFileChooser.getSelectedFile().getPath();

            try {
                //read file into GUI text field
                FileReader reader = new FileReader(fileName);
                BufferedReader br = new BufferedReader(reader);
                fileOutput.read(br, null);
                br.close();
                fileOutput.requestFocusInWindow();
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // TODO add your handling code here:
        //shows error if nothing to save
        if (fileName == null) {
            JOptionPane.showMessageDialog(null, "No file opened", "Warning Message", JOptionPane.WARNING_MESSAGE);
        } else {
            //Append each line of text area to string variable to be saved
            String outputFileContent = "";
            for (int i = 0; i < fileRW.lineNumber; i++) {
                outputFileContent += (fileOutput.getText() + "\n");
            }

            //Default save option = output.txt else saves to user chosen file path
            JFileChooser txtFileChooser = new JFileChooser(new File("output.txt"));
            FileNameExtensionFilter filter = new FileNameExtensionFilter("", "txt");
            txtFileChooser.setFileFilter(filter);
            int stateTxtFileChooser = txtFileChooser.showSaveDialog(null);
            if (stateTxtFileChooser == JFileChooser.APPROVE_OPTION) {
                String fileName = txtFileChooser.getSelectedFile().getPath();
                fileRW.writeFile(fileName, outputFileContent);
            }
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void nameSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSortActionPerformed
        // TODO add your handling code here:

        if (fileName == null) {
            fileOutput.setText("Please open a file!");
            openFileActionPerformed(evt);
        }

        String all = "";
        for (String line : fileOutput.getText().split("\\n")) {

            String[] results = line.split(", ");

            BinaryTree bt = new BinaryTree();
            Student std;
            int mark = Integer.parseInt(results[1]);
            std = new Student(results[0], mark);
            bt.add(std);
            std.setKey(std.name);
            bt.traversal();

        }
    }//GEN-LAST:event_nameSortActionPerformed

    private void markSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markSortActionPerformed
        // TODO add your handling code here:

        if (fileName == null) {
            fileOutput.setText("Please open a file!");
            openFileActionPerformed(evt);
        }
        String all = "";
        for (String line : fileOutput.getText().split("\\n")) {

            String[] results = line.split(", ");

            BinaryTree bt = new BinaryTree();
            Student std;
            int mark = Integer.parseInt(results[1]);
            std = new Student(results[0], mark);
            bt.add(std);
            std.setKey(std.mark);
            bt.traversal();

        }
    }//GEN-LAST:event_markSortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea fileOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton markSort;
    private javax.swing.JButton nameSort;
    private javax.swing.JButton openFile;
    private javax.swing.JButton saveFile;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
